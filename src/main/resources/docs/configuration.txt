@Configuration 과 바이트코드 조작의 마법
- 스프링 컨테이너는 싱글톤 레지스트리. 따라서 스프링 빈이 싱글톤이 되도록 보장해주어야 한다.
  그런데 스프링이 자바 코드까지 어떻게 하기는 어렵다. 저 자바 코드를 보면 분명 3번 호출되어야 한다.
  그래서 스프링은 클래스의 바이트 코드를 조작하는 라이브러리를 사용한다.
  모든 비밀은 @Configuration 을 적용한 AppConfig에 있다.

- 스프링이 CGLIB 라는 바이트코드 조작 라이브러리를 사용해서 AppConfig 클래스를 상송 받은 임의의 다른 클래스를 만들고, 그 다른 클래스를 스프링 빈으로 등록
- 그 임의의 다른 클래스가 바로 싱글톤을 보장

- @Bean 이 붙은 메서드마다 이미 스프링 빈이 존재하면 존재하는 빈을 반환하고, 스프링 비니 없으면 생성해서 스프링 빈으로 등록하고 반환하는 코드가 동적으로 생성

참고: AppConfig@CGLIB는 AppConfig의 자식 타입이므로, AppConfig 타입으로 조회 가능

@Configuration 을 적용하지 않고 @Bean만 적용하면 어떻게 될까?
- @Configuration 을 붙이면 바이트코드를 조작하는 CGLIB 기술을 사용해서 싱글톤을 보장하지만, 반약 @Bean만 적용하면 어떻게 될까?
    - 스프링 빈으로 등록은 되지만 싱글톤은 보장되지 않는다.